
tuple type: Coeffs = Int^2
field names: (prev, curr)

tuple type: GcdAndCoeffs = Int^3
field names: (gcd, a, b)

extended_euclidean_of(_)and(_): Int^2 => GcdAndCoeffs
  = ee_recursion(init_a_coeffs, init_b_coeffs, _)
    where
    init_a_coeffs, init_b_coeffs: all Coeffs
      = (1, 0), (0, 1)

    ee_recursion(_, _, _): Coeffs x Coeffs x Int^2 => GcdAndCoeffs
      = (a_coeffs, b_coeffs, (x, ?))
        0 => (x, a_coeffs.prev, b_coeffs.prev)
        y =>
          ee_recursion(next(a_coeffs), next(b_coeffs), (y, (x)mod(y)))
          where
          next(_): Coeffs => Coeffs
            = _.change{prev = curr, curr = prev - (x)div(y) * curr}

read_two_ints: ProgramWith(Int^2)
  = print("Please give me 2 ints");
    get_line >> split(_)to_words o> ?
      [i, j] => (from_string(i), from_string(j)) -> program_with(_)
      ... => throw_err("You didn't give me 2 ints")

print_gcd_and_coeffs_of(_): GcdAndCoeffs => Program
  = gac => print(message)
    where
    message: String
      = "Gcd: " + gac.gcd + "\nCoefficients: a = " + gac.a + ", b = " + gac.b

main: Program
  = read_two_ints >>
    extended_euclidean_of(_)and(_) o> print_gcd_and_coeffs_of(_)

