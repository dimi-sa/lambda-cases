
tuple type: (T1)Tree = T1 x (T1)Trees
field names: (root, subtrees)

type nickname: (T1)Trees = ListOf((T1)Tree)s

tuple type: (T1)ResultTreeAndNum = (Int x T1)Tree x Int
field names: (tree, t_num)

tuple type: (T1)ResultTreesAndNum = (Int x T1)Trees x Int
field names: (trees, ts_num)

dfs_on_tree(_) : (T1)Tree => (Int x T1)Tree
  = dfs_on_tree(_)with_num(1) o> _.tree
    where
    dfs_on_tree(_)with_num(_) : (T1)Tree x Int => (T1)ResultTreeAndNum
      = (tree, num) => (new_tree, subtrees_res.ts_num)
        where
        new_tree : (Int x T1)Tree
          = ((num, tree.root), subtrees_res.trees)

        subtrees_res : (T1)ResultTreesAndNum
          = dfs_on_trees(tree.subtrees)with_num(num + 1)

    dfs_on_trees(_)with_num(_) : (T1)Trees x Int => (T1)ResultTreesAndNum
      = (?, num)
        [] => ([], num)
        [tree1, other_trees = ...] =>
          (tree_res.tree + trees_res.trees, trees_res.ts_num)
          where
          tree_res : (T1)ResultTreeAndNum
            = dfs_on_tree(tree1)with_num(num)

          trees_res : (T1)ResultTreesAndNum
            = dfs_on_trees(other_trees)with_num(tree_res.t_num)

test_tree : (Char)Tree
  = ( 'a'
    , [('b', [('e', []), ('f', [])]), ('c', []), ('d', [('g', []), ('h', [])])]
    )

type_theorem (@A)Has_Str_Rep --> ((@A)Tree)Has_Str_Rep
proof
  (_)to_string =
    tree =>
    "\nroot: " + (tree.root)to_string +
    "\nsubtrees:\n" + (tree.subtrees)to_string + "\n"

main: Program
  = dfs_on_tree(test_tree) -> (_)to_string -> print(_)
